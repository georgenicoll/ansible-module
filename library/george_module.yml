#!/usr/bin/python

# Copyright: (c) 2020, Your Name <george.nicoll@gmail.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

DOCUMENTATION = r'''
---
module: george_module

short_description: This is my module for playing around with modules

version_added: "1.0.0"

description: This is a test modules that is being used to understand how modules work.

options:
    directory:
        description: The directory that the state file should be in
        required: true
        type: str
    file_name:
        description: The file name that we will look up the state in
        required: true
        type: str
    state:
        description: The state (value within the file)
        required: true
        type: str
        

author:
    - George (@georgenicoll)
'''

EXAMPLES = r'''
# Set 'state' to 'RUNNING' in /tmp/somestate.txt
- directory: /tmp
  file_name: somestate.txt
  state: RUNNING
'''

RETURN = r'''
file:
    description: The state file
    type: str
    returned: always
    sample: '/tmp/somefile.txt'
original_state:
    description: The original state that was in the file
    type: str
    returned: always
    sample: 'RUNNING'
current_state:
    description: The current state written to the file
    type: str
    returned: always
    sample: 'STOPPED'
message:
    description: The output message that the test module generates.
    type: str
    returned: always
    sample: 'done'
'''

from ansible.module_utils.basic import AnsibleModule


def run_module():
    # define available arguments/parameters a user can pass to the module
    module_args = dict(
        directory=dict(type='str', required=True),
        file_name=dict(type='str', required=True),
        state=dict(type='str', required=True),
    )

    # seed the result dict in the object
    # we primarily care about changed and state
    # changed is if this module effectively modified the target
    # state will include any data that you want your module to pass back
    # for consumption, for example, in a subsequent task
    result = dict(
        changed=False,
        file = '',
        original_state='',
        current_state='',
        message = '',
    )

    # the AnsibleModule object will be our abstraction working with Ansible
    # this includes instantiation, a couple of common attr would be the
    # args/params passed to the execution, as well as if the module
    # supports check mode
    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True
    )
    
    # Deduce the file
    directory = module.params['directory']
    file_name = module.params['file_name']
    state_file = directory + '/' + file_name
    result['file'] = state_file
    
    # Read out the current contents, if we get an IOError just assume empty
    current_state = ''
    try:
        with open(state_file, 'r') as f:
            current_state = "\n".join(f.readlines())
    except IOError:
        current_state = '<Unable to open file>'
             
    result['original_state'] = current_state

    # if the user is working with this module in only check mode we do not
    # want to make any changes to the environment, just return the current
    # state with no modifications
    if module.check_mode:
        module.exit_json(**result)
        
    desired_state = module.params['state']
        
    # manipulate or modify the state as needed (this is going to be the
    # part where your module will do what it needs to do)
    if current_state != desired_state:
        try:
            with open(state_file, 'w') as f:
                f.write(desired_state)
            result['current_state'] = desired_state
            result['changed'] = True
            result['message'] = 'done'
            result['diff'] = dict(
                before='',
                before_state=current_state,
                after='',
                after_state=desired_state,
            )
        except IOError:
            result['failed'] = 'IOError'
    else:
       result['current_state'] = desired_state
       result['message'] = 'done'
    
    # in the event of a successful module execution, you will want to
    # simple AnsibleModule.exit_json(), passing the key/value results
    module.exit_json(**result)


def main():
    run_module()


if __name__ == '__main__':
    main()
